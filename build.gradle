plugins {
	id 'java'
	id 'application'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id "org.openapi.generator" version "5.3.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

application {
	mainClassName = 'com.example.todoapi.TodoApiApplication'
}

run {
	// 環境変数の設定
	environment 'SPRING_PROFILES_ACTIVE', 'dev'
//	environment 'SPRING_PROFILES_ACTIVE', 'prod'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
	compileOnly 'io.swagger:swagger-annotations:1.6.5'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

task buildApiDoc(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "html2"
	inputSpec ="$rootDir/src/main/resources/api-schema.yaml".toString()
	outputDir = "$buildDir/apidoc".toString()
}

task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "spring"
	inputSpec ="$rootDir/src/main/resources/api-schema.yaml".toString()
	outputDir = "$buildDir/spring".toString()
	apiPackage = "com.example.todoapi.controller"
	modelPackage = "com.example.todoapi.model"
	configOptions = [
			interfaceOnly: "true"
	]
}

task replaceJavaxWithJakarta {
	doLast {
		def sourceDir = "$buildDir/spring/src/main/java"
		def files = fileTree(dir: sourceDir, include: '**/*.java')

		files.each { file ->
			def text = file.text
			text = text.replaceAll("javax\\.", "jakarta.")
			file.write(text)
		}
	}
}

//下記設定により、コンパイルされる前にbuildSpringServerでコード生成してからコンパイルされるよう設定
compileJava.dependsOn tasks.buildSpringServer

//下記設定により、openapi Generatorで生成したbuild配下のコードをimportできるようになる
sourceSets.main.java.srcDir "$buildDir/spring/src/main/java"

//openapi generatorで生成されるコードが、javaxのvalidationなのだが、
//spring3ではjakartaパッケージに名前空間が変更されている
//それをコード生成後に修正するタスク
buildSpringServer.finalizedBy(replaceJavaxWithJakarta)